name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
      - name: Verify Go installation
        run: |
          echo "Go version:"
          go version
          echo "Go environment:"
          go env GOPATH
          go env GOROOT
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.5.0
          args: --config .golangci.yml --timeout=5m

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
      - name: Verify tools
        run: |
          echo "Checking required tools:"
          echo "- gofmt: $(which gofmt)"
          echo "- find: $(which find)"
          echo "- grep: $(which grep)"
          echo "- sed: $(which sed)"
          echo "All tools are available ✓"
      - name: Check formatting
        run: |
          unformatted=$(gofmt -s -l .)
          if [ -n "$unformatted" ]; then
            echo "The following files need formatting:"
            echo "$unformatted"
            echo "Run 'gofmt -s -w .' or 'make fmt' to fix"
            exit 1
          fi
      - name: Check trailing whitespaces
        run: |
          files_with_whitespace=$(find . -type f \( -name "*.go" -o -name "*.md" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" -o -name "*.sh" -o -name "Makefile" -o -name "Dockerfile" \) ! -path "./vendor/*" ! -path "./.git/*" ! -path "./.github/*" -exec grep -l '[[:space:]]$' {} + 2>/dev/null || true)
          if [ -n "$files_with_whitespace" ]; then
            echo "❌ The following files have trailing whitespaces:"
            echo "$files_with_whitespace"
            echo "Run 'make trim-whitespace' to fix"
            exit 1
          fi
          echo "✅ No trailing whitespaces found"
      - name: Check go mod tidy
        run: |
          go mod tidy
          if ! git diff --quiet go.mod go.sum; then
            echo "go mod tidy made changes - please run 'go mod tidy' and commit the changes"
            git diff go.mod go.sum
            exit 1
          fi

  vet:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
      - name: Run go vet
        run: go vet ./...

  build:
    runs-on: ubuntu-latest
    needs: [lint, format, vet]
    strategy:
      matrix:
        go: ['1.22.x', '1.23.x', '1.24.x']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
      - name: Build
        run: |
          go build -v ./...
          go build -o bin/api ./cmd/api

  test:
    runs-on: ubuntu-latest
    needs: [lint, format, vet]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
      - name: Go env
        run: |
          go env
          go version
      - name: Download deps
        run: GOPROXY=direct GOSUMDB=off go mod download
      - name: Test with coverage
        run: |
          GOPROXY=direct GOSUMDB=off go test ./... -coverpkg=./... -coverprofile=coverage.out -count=1
          go tool cover -func=coverage.out | tail -n 1
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out
      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.out
          fail_ci_if_error: false
        if: ${{ always() }}
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=devops-thiago_otel-example-go
            -Dsonar.organization=devops-thiago
            -Dsonar.go.coverage.reportPaths=coverage.out
        if: ${{ env.SONAR_TOKEN != '' }}

  docker-build:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: thiagosg/otel-crud-api-go:pr-${{ github.event.pull_request.number || 'main' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: thiagosg/otel-crud-api-go:pr-${{ github.event.pull_request.number || 'main' }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'


